/*! \page protocol Proxy Server Wire Protocol

The Parsely pixel server accepts GET requests containing the information for single pageviews. For mobile devices, sending one request per pageview wastes battery.
The Parsely SDK sends batches of events to a proxy server, which then splits the batches into individual requests for consumption by the pixel server.
The Parsely SDK creates this batched request for you, but there are some cases where you might want to construct this batched request yourself.

Elements of the Proxy Request
-----------------------------

All requests sent to `http://hack.parsely.com/mobileproxy/` must have a single querystring argument `rqs`. All other querystring aruments are ignored.
The value of the `rqs` (requests) parameter is a **URL-encoded** JSON document that must have the following structure:

    {
        "data":{
            "idsite":"dailycaller.com",
            "parsely_uuid":"76e4c7f0afeb4e7643f5089235779937d9637b55"
            "type":"mobileapp",
            "appname":"ParselySDK",
            "manufacturer":"Apple",
            "os":"iPhone OS",
            "os_version":"6.1",
        },
        "events":[
            {
                "url":"http://dailycaller.com/2013/03/20/obama-delinquent-with-budgets-always-on-time-with-ncaa-brackets-say-republicans/",
                "ts":1363796913.105937
            },
            {
                "url":"http://dailycaller.com/2013/03/20/obamas-limo-breaks-down-in-israel-filled-with-diesel-photos/",
                "ts":1363596915.229876
            },
            ...
            {
                "url":"http://dailycaller.com/2013/03/18/the-spin-does-not-stop-here/",
                "ts":1363296917.195734
            }
        ]
    }

The `data` variable is a document containing invariant data about the pixel requests - that is, data that is constant for all of the events being transmitted.
The `events` variable is a list of documents containing data that differs per request.

Variable        | Container | Description                                           | Required |          Example
--------------- | --------- | ----------------------------------------------------- | -------- | ---------------------------------------------------------------------------------------------
`idsite`        | `data`    | The site ID where data should be stored               | yes      | `"idsite":"dailycaller.com"`
`parsely_uuid`  | `data`    | The UUID for the current user or device               | yes      | `"parsely_uuid":"76e4c8f0afeb4e7643f5089235779937d9637b55"`
`type`          | `data`    | One of "mobileapp","mobileweb","desktop"              | yes      | `"type":"mobileapp"`
`appname`       | `data`    | The name of the current app (for mobile devices)      | no       | `"appname":"MyCoolApp"`
`manufacturer ` | `data`    | The device manufacturer (for mobile devices)          | no       | `"manufacturer":"Apple"`
`os`            | `data`    | The name of the operating system (mobile only)        | no       | `"os":"iPhone OS"`
`os_version`    | `data`    | Operating system major and minor version              | no       | `"os_version":"6.1"`
`url`           | `events`  | The canonical URL of the tracked post                 | yes      | `"url":"http://dailycaller.com/2013/03/20/obama-reid-dragged-into-evolving-menendez-donor-scandal/"`
`ts`            | `events`  | The UNIX timestamp of the event (seconds since epoch) | yes      | `"ts":1363796913.220884`

A real request to the proxy server might look like this one, which contains two separate pageview events in the URL-encoded JSON document:

    GET http://hack.parsely.com/mobileproxy/?rqs=%7B%22data%22%3A%7B%22appname%22%3A%22MyCoolApp%22%2C%22type%22%3A%22mobileapp%22%2C%22manufacturer%22%3A%22Apple%22%2C%22idsite%22%3A%22dailycaller.com%22%2C%22os%22%3A%22iPhone%20OS%22%2C%22os_version%22%3A%226.1%22%2C%22parsely_uuid%22%3A%2276e4c7f0afeb4e7643f5089235779937d9637b55%22%7D%2C%22events%22%3A%5B%7B%22url%22%3A%22http%3A%5C%2F%5C%2Fdailycaller.com%5C%2Fnot-a-real-url.html%22%2C%22ts%22%3A1363799126.753075%7D%2C%7B%22url%22%3A%22http%3A%5C%2F%5C%2Fdailycaller.com%5C%2Fnot-a-real-url.html%22%2C%22ts%22%3A1363799126.870318%7D%5D%7D
    
Generating a UUID
-----------------

On desktop browsers, you can avoid generating a UUID by <a href="http://parsely.com/api/tracking_pixel.html#using-the-parse-ly-network-uuid">using the Parsely network UUID</a>.

Mobile apps that use the Parsely SDK don't have to create their own UUIDs, as the SDK handles that. However, if you'd like to create your own, it must be guaranteed to be unique per device.
The easiest way to guarantee uniqueness is to generate a UUID using the device MAC address. On iOS, see the `CFUUIDCreate()` function for a description of how to do this.
Once you create the UUID, you should save it in persistent storage (for example, iOS' `NSUserDefaults` key-value store).

*/